(defun read-lines (filepath)  "Returns a list of lines of a file at filepath."  (with-temp-buffer    (insert-file-contents filepath)    (split-string (buffer-string) "\n" t)))(defun grep-xml-attr (line attr)  (let ((rgx (concat "\\s +" attr "=\"\\(.*?\\)\"")))    (let ((match-pos (string-match rgx line)))      (if match-pos (substring line (match-beginning 1) (match-end 1)) nil))))(defun get-mvn-repo ()  (let ((repo-var "M2_REPO"))    (let ((m2-repo (getenv repo-var)))      (if (not m2-repo)          (setenv repo-var (read-directory-name "Enter the maven local repository directory: ")))      (getenv repo-var))))(defun deps-gen (name)  (let ((output-directory (read-directory-name "Enter the output directory: "))        (mvn-repo (get-mvn-repo))        (filepath (read-file-name "Enter .classpath file path: "))        (current-directory default-directory))    (if (not (file-exists-p output-directory))        (make-directory output-directory t))    (cd output-directory)    (message "Start extracting...")    (let ((output-buffer (get-buffer "*java-deps-gen*"))          (error-buffer (get-buffer "*java-deps-gen-error*")))      (mapcar       (lambda (line)         (let ((m (grep-xml-attr line name)))           (if m               (let ((jar-file (replace-regexp-in-string "M2_REPO/" mvn-repo m)))                 (if (file-exists-p jar-file)                     (progn                       (message (concat "File to extract: " jar-file))                       (shell-command (concat "jar xvf " jar-file) output-buffer error-buffer)))))))       (read-lines filepath)))    (message "Done")    (cd current-directory)))(defun deps-src-gen ()  (interactive)  (deps-gen "sourcepath"))(defun deps-cls-gen ()  (interactive)  (deps-gen "path"))(provide 'java-deps-gen)